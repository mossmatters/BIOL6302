add=TRUE,
method='jitter')
boxplot(class.data$total_avg~class.data$attend,
las=1,
xlab="Attended at Least X Lectures",
ylab="Final Course Percentage",
main="BIOL 1401 F2017")
stripchart(jitter(class.data$total_avg)~class.data$attend,
col='blue',
cex=1.5,
vertical=TRUE,
add=TRUE,
method='jitter')
abline(h=c(.6,.7,.8,.9),lty=3)
summary(attendance.avg.lm)
sqrt(0.3799)
boxplot(class.data$total_avg~class.data$attend,
las=1,
xlab="Attended at Least X of 40 Lectures",
ylab="Final Course Percentage",
main="BIOL 1401 F2017")
stripchart(jitter(class.data$total_avg)~class.data$attend,
col='blue',
cex=1.5,
vertical=TRUE,
add=TRUE,
method='jitter')
abline(h=c(.6,.7,.8,.9),lty=3)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
#Here, set the file name of the table generated by get_seq_lengths.py
sample.filename = "~/onedrive/Projects/AngiospermHybSeq/Analysis/final_seqlengths.txt"
summary.filename = "~/onedrive/Projects/AngiospermHybSeq/Analysis/final_recovery_summary.txt"
summary.stats = read.table(summary.filename,header=1,row.names=1,sep='\t')
#You should not need to change anything below this line!
#-------------------------------------------------------
#########################
library(ggplot2)
library(reshape2)
sample.data= as.matrix(read.table(sample.filename,header=T,row.names=1))
sample.len = sample.data[2:nrow(sample.data),]
reference.len = as.numeric(sample.data[1,])
#Calculate the percentage length recovered relative to the reference.
percent.len=sweep(sample.len,2,as.numeric(reference.len),'/')
percent.len = ifelse(percent.len>1,1,percent.len)
percent.len= percent.len[match(row.names(summary.stats),row.names(percent.len)),]
percent.long = melt(percent.len)
#Calculate sizes for gene and sample labels, increase the multiplier to make text bigger
gene.size = dim(percent.len)[2] * 0.01
sample.size = dim(percent.len)[1] * 0.1
ggplot(data = percent.long, aes(x=Var2, y=Var1, fill = value))+
geom_raster()+
#guides(fill=FALSE)+ #remove this line if you want the heat scale to appear
scale_fill_gradient(high = "#132B43", low = "#FFFFFF")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(NULL)+xlab(NULL)+
theme(axis.text.y=element_text(face="italic",size = sample.size),axis.text.x =element_text(size=gene.size))
#ggsave("fern_gene_refined_scale_names.png", height = 4, width = 6, units = "in")
############
ggplot(aes(x=ReadsMapped,y=GenesWithSeqs,col=factor(Category)),data=summary.stats) +
geom_point(size=3) +
theme(legend.position = 'bottom')+
geom_vline(xintercept = 125000)
ggplot(aes(x=factor(Category),y=GenesWithSeqs),data=summary.stats)+
geom_point(size=3)
ggplot(aes(x=PctOnTarget,y=NumReads,col=factor(Category)),data=summary.stats) +
geom_point(size=3) +
theme(legend.position = 'bottom')
exclude_from_stats = c(16,28)
exclude_from_scats= c()
summary(lm(ReadsMapped~factor(Category),data=summary.stats[-exclude_from_stats,]))
summary(lm(NumReads~factor(Category),data=summary.stats[-exclude_from_stats,]))
summary(lm(PctOnTarget~factor(Category),data=summary.stats[-exclude_from_stats,]))
summary(lm(GenesWithSeqs~factor(Category),data=summary.stats[-exclude_from_stats,]))
summary(lm(GenesWithSeqs~ReadsMapped,data=summary.stats[-exclude_from_stats,]))
summary(lm(GenesWithSeqs~NumReads,data=summary.stats[-exclude_from_stats,]))
gene.zeroes = apply(percent.len,2,function(x) length(which(x==0)))
gene.zeroes[order(gene.zeroes)]
length(which(gene.zeroes > 20))
length(gene.zeroes)
cbPalette <- c("#E69F00","#999999", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
recovery.stats = summary.stats[,c("genusName","GenesAt50pct","GenesWithContigs","GenesWithSeqs","GenesMapped")]
recovery.stats$genusName = factor(recovery.stats$genusName, levels = summary.stats$genusName)
#recovery.stats = summary.stats[,c("genusName","GenesMapped","GenesWithContigs","GenesWithSeqs","GenesAt50pct")]
recovery.stats.long=melt(recovery.stats)
#factor.order = c("GenesAt50pct","GenesWithContigs","GenesWithSeqs","GenesMapped")
#recovery.stats.long$variable = recovery.stats.long$variable[order(match(recovery.stats.long$variable,factor.order))]
stackbar = ggplot(recovery.stats.long,
aes(x=genusName,y=value,
fill=variable#factor(variable,levels=c("GenesMapped","GenesWithContigs","GenesWithSeqs","GenesAt50pct"))
)) +
geom_bar(data=recovery.stats.long[recovery.stats.long$variable=="GenesMapped",],stat='identity')+
geom_bar(data=recovery.stats.long[recovery.stats.long$variable=="GenesWithContigs",],stat='identity')+
geom_bar(data=recovery.stats.long[recovery.stats.long$variable=="GenesWithSeqs",],stat='identity')+
geom_bar(data=recovery.stats.long[recovery.stats.long$variable=="GenesAt50pct",],stat='identity')+
theme(axis.text.x=element_text(angle=90,hjust=1),legend.position='none')+
scale_fill_manual(values=cbPalette)+
geom_vline(xintercept=c(7.5,19.5,31.5))+
annotate("text",label=c("0","1","2","3"),y=360,x=c(3.5,(7+19)/2,(31+19)/2,36.5))
stackbar
summary(lm(GenesWithSeqs~log(NumReads),data=summary.stats[-exclude_from_stats,]))
#exclude_from_stats = c(16,28)
exclude_from_scats= c(37)
summary(lm(ReadsMapped~factor(Category),data=summary.stats[-exclude_from_stats,]))
summary(lm(NumReads~factor(Category),data=summary.stats[-exclude_from_stats,]))
summary(lm(PctOnTarget~factor(Category),data=summary.stats[-exclude_from_stats,]))
summary(lm(GenesWithSeqs~factor(Category),data=summary.stats[-exclude_from_stats,]))
summary(lm(GenesWithSeqs~ReadsMapped,data=summary.stats[-exclude_from_stats,]))
summary(lm(GenesWithSeqs~NumReads,data=summary.stats[-exclude_from_stats,]))
summary(lm(GenesWithSeqs~log(NumReads),data=summary.stats[-exclude_from_stats,]))
summary(lm(GenesWithSeqs~log(ReadsMapped),data=summary.stats[-exclude_from_stats,]))
exclude_from_stats = c(37)
summary(lm(ReadsMapped~factor(Category),data=summary.stats[-exclude_from_stats,]))
#exclude_from_stats = c(16,28)
exclude_from_stats= c()
summary(lm(ReadsMapped~factor(Category),data=summary.stats[-exclude_from_stats,]))
summary(lm(ReadsMapped~factor(Category),data=summary.stats))
summary(lm(NumReads~factor(Category),data=summary.stats))
summary(lm(log(ReadsMapped)~factor(Category),data=summary.stats))
summary(lm(log(NumReads)~factor(Category),data=summary.stats))
summary(lm(NumReads~factor(Category),data=summary.stats))
summary(lm(PctOnTarget~factor(Category),data=summary.stats))
summary(lm(GenesWithSeqs~factor(Category),data=summary.stats))
summary(lm(GenesWithSeqs~log(ReadsMapped),data=summary.stats))
summary(lm(GenesWithSeqs~NumReads,data=summary.stats))
summary(lm(GenesWithSeqs~log(NumReads),data=summary.stats))
length(which(apply(percent.len,1,function(x) which(x > 0.5)))
length(which(apply(percent.len,1,function(x) which(x > 0.5)))))
apply(percent.len,1,function(x) which(x > 0.5)))))
apply(percent.len, 1, function(x) which(x > 0.5))
length(apply(percent.len, 1, function(x) which(x > 0.5)))
which(apply(percent.len, 1, function(x) which(x > 0.5)) > 300)
which(length(apply(percent.len, 1, function(x) which(x > 0.5))) > 300)
which(length(apply(percent.len, 2, function(x) which(x > 0.5))) > 300)
length(apply(percent.len, 2, function(x) which(x > 0.5)))
length(apply(percent.len, 1, function(x) which(x > 0.5)))
length(which(summary.stats$GenesWithSeqs) > 300)
length(which(summary.stats$GenesWithSeqs > 300 ))
dim(percent.len)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
#Here, set the file name of the table generated by get_seq_lengths.py
sample.filename = "~/Downloads/trimmed_summary.txt"
#You should not need to change anything below this line!
#-------------------------------------------------------
#########################
library(ggplot2)
library(reshape2)
sample.data= as.matrix(read.table(sample.filename,header=T,row.names=1))
sample.len = sample.data[2:nrow(sample.data),]
reference.len = as.numeric(sample.data[1,])
#Calculate the percentage length recovered relative to the reference.
percent.len=sweep(sample.len,2,as.numeric(reference.len),'/')
percent.len = ifelse(percent.len>1,1,percent.len)
percent.len= percent.len[match(row.names(summary.stats),row.names(percent.len)),]
percent.long = melt(percent.len)
#Calculate sizes for gene and sample labels, increase the multiplier to make text bigger
gene.size = dim(percent.len)[2] * 0.01
sample.size = dim(percent.len)[1] * 0.1
ggplot(data = percent.long, aes(x=Var2, y=Var1, fill = value))+
geom_raster()+
#guides(fill=FALSE)+ #remove this line if you want the heat scale to appear
scale_fill_gradient(high = "#132B43", low = "#FFFFFF")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(NULL)+xlab(NULL)+
theme(axis.text.y=element_text(face="italic",size = sample.size),axis.text.x =element_text(size=gene.size))
#ggsave("fern_gene_refined_scale_names.png", height = 4, width = 6, units = "in")
View(percent.len)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
#Here, set the file name of the table generated by get_seq_lengths.py
sample.filename = "~/Downloads/trimmed_summary.txt"
#You should not need to change anything below this line!
#-------------------------------------------------------
#########################
library(ggplot2)
library(reshape2)
sample.data= as.matrix(read.table(sample.filename,header=T,row.names=1,sep="\t"))
sample.len = sample.data[2:nrow(sample.data),]
reference.len = as.numeric(sample.data[1,])
#Calculate the percentage length recovered relative to the reference.
percent.len=sweep(sample.len,2,as.numeric(reference.len),'/')
percent.len = ifelse(percent.len>1,1,percent.len)
percent.len= percent.len[match(row.names(summary.stats),row.names(percent.len)),]
percent.long = melt(percent.len)
#Calculate sizes for gene and sample labels, increase the multiplier to make text bigger
gene.size = dim(percent.len)[2] * 0.01
sample.size = dim(percent.len)[1] * 0.1
ggplot(data = percent.long, aes(x=Var2, y=Var1, fill = value))+
geom_raster()+
#guides(fill=FALSE)+ #remove this line if you want the heat scale to appear
scale_fill_gradient(high = "#132B43", low = "#FFFFFF")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(NULL)+xlab(NULL)+
theme(axis.text.y=element_text(face="italic",size = sample.size),axis.text.x =element_text(size=gene.size))
#ggsave("fern_gene_refined_scale_names.png", height = 4, width = 6, units = "in")
View(percent.len)
#Here, set the file name of the table generated by get_seq_lengths.py
sample.filename = "~/Downloads/trimmed_summary.txt"
sample.data= as.matrix(read.table(sample.filename,header=T,row.names=1,sep="\t"))
sample.len = sample.data[2:nrow(sample.data),]
View(sample.data)
View(sample.len)
#Calculate the percentage length recovered relative to the reference.
percent.len=sweep(sample.len,2,as.numeric(reference.len),'/')
percent.len = ifelse(percent.len>1,1,percent.len)
#percent.len= percent.len[match(row.names(summary.stats),row.names(percent.len)),]
percent.long = melt(percent.len)
gene.size = dim(percent.len)[2] * 0.01
sample.size = dim(percent.len)[1] * 0.1
ggplot(data = percent.long, aes(x=Var2, y=Var1, fill = value))+
geom_raster()+
#guides(fill=FALSE)+ #remove this line if you want the heat scale to appear
scale_fill_gradient(high = "#132B43", low = "#FFFFFF")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(NULL)+xlab(NULL)+
theme(axis.text.y=element_text(face="italic",size = sample.size),axis.text.x =element_text(size=gene.size))
#ggsave("fern_gene_refined_scale_names.png", height = 4, width = 6, units = "in")
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
#Here, set the file name of the table generated by get_seq_lengths.py
sample.filename = "~/Downloads/trimmed_summary.txt"
#You should not need to change anything below this line!
#-------------------------------------------------------
#########################
library(ggplot2)
library(reshape2)
sample.data= as.matrix(read.table(sample.filename,header=T,row.names=1,sep="\t"))
sample.len = sample.data[2:nrow(sample.data),]
reference.len = as.numeric(sample.data[1,])
#Calculate the percentage length recovered relative to the reference.
percent.len=sweep(sample.len,2,as.numeric(reference.len),'/')
percent.len = ifelse(percent.len>1,1,percent.len)
#percent.len= percent.len[match(row.names(summary.stats),row.names(percent.len)),]
percent.long = melt(percent.len)
#Calculate sizes for gene and sample labels, increase the multiplier to make text bigger
gene.size = dim(percent.len)[2] * 0.01
sample.size = dim(percent.len)[1] * 0.1
ggplot(data = percent.long, aes(x=Var2, y=Var1, fill = value))+
geom_raster()+
#guides(fill=FALSE)+ #remove this line if you want the heat scale to appear
scale_fill_gradient(high = "#132B43", low = "#FFFFFF")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(NULL)+xlab(NULL)+
theme(axis.text.y=element_text(face="italic",size = sample.size),axis.text.x =element_text(size=gene.size))
#ggsave("fern_gene_refined_scale_names.png", height = 4, width = 6, units = "in")
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
#Here, set the file name of the table generated by get_seq_lengths.py
sample.filename = "~/Downloads/trimmed_summary.txt"
#You should not need to change anything below this line!
#-------------------------------------------------------
#########################
library(ggplot2)
library(reshape2)
sample.data= as.matrix(read.table(sample.filename,header=T,row.names=1,sep="\t"))
sample.len = sample.data[2:nrow(sample.data),]
reference.len = as.numeric(sample.data[1,])
#Calculate the percentage length recovered relative to the reference.
percent.len=sweep(sample.len,2,as.numeric(reference.len),'/')
percent.len = ifelse(percent.len>1,1,percent.len)
#percent.len= percent.len[match(row.names(summary.stats),row.names(percent.len)),]
percent.long = melt(percent.len)
#Calculate sizes for gene and sample labels, increase the multiplier to make text bigger
gene.size = dim(percent.len)[2] * 0.01
sample.size = dim(percent.len)[1] * 0.1
ggplot(data = percent.long, aes(x=Var2, y=Var1, fill = value))+
geom_raster()+
#guides(fill=FALSE)+ #remove this line if you want the heat scale to appear
scale_fill_gradient(high = "#132B43", low = "#FFFFFF")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(NULL)+xlab(NULL)+
theme(axis.text.y=element_text(face="italic",size = sample.size),axis.text.x =element_text(size=gene.size))
#ggsave("fern_gene_refined_scale_names.png", height = 4, width = 6, units = "in")
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
#Here, set the file name of the table generated by get_seq_lengths.py
sample.filename = "~/Downloads/trimmed_summary.txt"
#You should not need to change anything below this line!
#-------------------------------------------------------
#########################
library(ggplot2)
library(reshape2)
sample.data= as.matrix(read.table(sample.filename,header=T,row.names=1,sep="\t"))
sample.len = sample.data[2:nrow(sample.data),]
reference.len = as.numeric(sample.data[1,])
#Calculate the percentage length recovered relative to the reference.
percent.len=sweep(sample.len,2,as.numeric(reference.len),'/')
percent.len = ifelse(percent.len>1,1,percent.len)
#percent.len= percent.len[match(row.names(summary.stats),row.names(percent.len)),]
percent.long = melt(percent.len)
#Calculate sizes for gene and sample labels, increase the multiplier to make text bigger
gene.size = dim(percent.len)[2] * 0.001
sample.size = dim(percent.len)[1] * 0.1
ggplot(data = percent.long, aes(x=Var2, y=Var1, fill = value))+
geom_raster()+
#guides(fill=FALSE)+ #remove this line if you want the heat scale to appear
scale_fill_gradient(high = "#132B43", low = "#FFFFFF")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(NULL)+xlab(NULL)+
theme(axis.text.y=element_text(face="italic",size = sample.size),axis.text.x =element_text(size=gene.size))
#ggsave("fern_gene_refined_scale_names.png", height = 4, width = 6, units = "in")
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
#Here, set the file name of the table generated by get_seq_lengths.py
sample.filename = "~/Downloads/trimmed_summary.txt"
#You should not need to change anything below this line!
#-------------------------------------------------------
#########################
library(ggplot2)
library(reshape2)
sample.data= as.matrix(read.table(sample.filename,header=T,row.names=1,sep="\t"))
sample.len = sample.data[2:nrow(sample.data),]
reference.len = as.numeric(sample.data[1,])
#Calculate the percentage length recovered relative to the reference.
percent.len=sweep(sample.len,2,as.numeric(reference.len),'/')
percent.len = ifelse(percent.len>1,1,percent.len)
#percent.len= percent.len[match(row.names(summary.stats),row.names(percent.len)),]
percent.long = melt(percent.len)
#Calculate sizes for gene and sample labels, increase the multiplier to make text bigger
gene.size = dim(percent.len)[2] * 0.001
sample.size = dim(percent.len)[1] * 0.01
ggplot(data = percent.long, aes(x=Var2, y=Var1, fill = value))+
geom_raster()+
#guides(fill=FALSE)+ #remove this line if you want the heat scale to appear
scale_fill_gradient(high = "#132B43", low = "#FFFFFF")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(NULL)+xlab(NULL)+
theme(axis.text.y=element_text(face="italic",size = sample.size),axis.text.x =element_text(size=gene.size))
#ggsave("fern_gene_refined_scale_names.png", height = 4, width = 6, units = "in")
sample.size = dim(percent.len)[1] * 0.05
sample.size = dim(percent.len)[1] * 0.05
ggplot(data = percent.long, aes(x=Var2, y=Var1, fill = value))+
geom_raster()+
#guides(fill=FALSE)+ #remove this line if you want the heat scale to appear
scale_fill_gradient(high = "#132B43", low = "#FFFFFF")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(NULL)+xlab(NULL)+
theme(axis.text.y=element_text(face="italic",size = sample.size),axis.text.x =element_text(size=gene.size))
shiny::runApp('OneDrive - Texas Tech University/Courses/BIOL1401/BIOL1401Grades')
library(ggtree)
library(BiocManager)
install.packages("BiocManager")
## install.packages("BiocManager")
library(BiocManager)
install("ggtree")
library(ggtree)
library(devtools)
devtools::install_github("jinyizju/V.PhyloMaker")
library(V.PhyloMaker)
my.data = read.csv("~/Desktop/Phylo_Smoke/Input/SmokeResponseSummary_Master.csv)
#make tree
tree.output <- phylo.maker(sp.list = taxa, tree = GBOTB.extended)
#extract tree
tree <- tree.output$scenario.3
#extract species list
tree.sp <- tree.output$species.list
#look at tree
plot(tree, type='f',cex=0.5)
#export tree
#write.tree(tree, "germ.tre")
tree <- read.tree("germ.tre")
tree <- ladderize(tree)
plot(tree, type= "fan", show.tip.label = FALSE, ) #gets rid of crowded names
##############
#read in data frame with germination and region data
df   <- read.csv("ordered_germ_df2.csv")
row.names(df) <- c(df$taxa) #need to set row names
df<-df[,-1]
#match.phylo.data(tree, df)
#sort(tree$tip.label, decreasing = FALSE)
#### plot traits on tree
pos_germ_responses <- df$pos_germ
pos_germ_responses <- data.frame(pos_germ_responses)
rownames(pos_germ_responses) <- tree$tip.label
pos_germ_responses <- as.matrix(pos_germ_responses) [,1]
cols <- setNames(c("white","blue"), sort(unique(pos_germ_responses)))
tiplabels(pie=to.matrix(pos_germ_responses, sort(unique(pos_germ_responses))), piecol=cols, cex=0.5)
###### Calculation of Fritz D statistic for phylogenetic signal (phylo.d in caper)
germD       <- comparative.data(tree, df, df)
phyloD_pos_germ <- phylo.d(germD, binvar= pos_germ, permut=1000)
print(phyloD_pos_germ)
plot(phyloD_pos_germ)
phyloD_neg_germ <- phylo.d(germD, binvar= neg_germ, permut=1000)
print(phyloD_neg_germ)
plot(phyloD_neg_germ)
##### Ancestral State Reconstruction
# resource: http://blog.phytools.org/2015/06/update-to-rerootingmethod-for-ancestral.html
require(phytools)
#ASR.germ <-setNames(df[,3],rownames(df))
##new version in phytools that allows phylogenies (rerooting instead of ace)
#fitER <- rerootingMethod(tree,ASR.germ,model="ER")
#plot(tree, type= "fan", show.tip.label = FALSE) #gets rid of crowded names
#cols <- setNames(c("black","white","green"), sort(unique(ASR.germ)))
#tiplabels(pie=to.matrix(ASR.germ[tree$tip.label],levels(ASR.germ)),piecol=cols,cex=0.3)
#add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1], y=0.8*par()$usr[3],fsize=0.8)
plot(tree,type="fan",lwd=1, edge.width= 4, show.tip.label = FALSE)
cols <- setNames(c("black","white","green"), sort(unique(ASR.germ)))
tiplabels(pie=to.matrix(total_germ, sort(unique(total_germ))), piecol=cols, cex=0.5)
nodelabels(pie=fitER$marginal.anc,piecol=cols,cex=0.4)
my.data = read.csv("~/Desktop/Phylo_Smoke/Input/SmokeResponseSummary_Master.csv")
my.data
names(my.data)
taxa = my.data$Species_phylo2
taxa
#make tree
tree.output <- phylo.maker(sp.list = taxa, tree = GBOTB.extended)
### make the example file
c1 <- c("Carya floridana", "Carya pallida", "Epiprinus siletianus", "Platycarya strobilacea", "Tilia amurensis", "Apodanthes caseariae", "Pilostyles blanchetii")
c2 <- c("Carya", "Carya", "Epiprinus", "Platycarya", "Tilia", "Apodanthes", "Pilostyles")
c3 <- c("Juglandaceae", "Juglandaceae", "Euphorbiaceae", "Juglandaceae", "Malvaceae", "Apodanthaceae", "Apodanthaceae")
example <- data.frame(species = c1, genus = c2, family = c3)
### run the function
result <- phylo.maker(example, scenarios=c("S1","S2","S3"))
result
par(mfrow = c(1, 3))
plot.phylo(result$scenario.1, cex = 1.5, main = "scenario.1")
nodelabels(round(branching.times(result$scenario.1), 1), cex = 1)
plot.phylo(result$scenario.2[[1]], cex = 1.5, main = "scenario.2")
nodelabels(round(branching.times(result$scenario.2[[1]]), 1), cex = 1)
plot.phylo(result$scenario.3, cex = 1.5, main = "scenario.3")
nodelabels(round(branching.times(result$scenario.3), 1), cex = 1)
library(parallel)
library(phytools)
#Make a Tree
set.seed(42)
tree<-pbtree(n=600)
# Simulate a binary character with equal transition rates
Q<-matrix(c(1,1,
1,1
),2,2)
rownames(Q)<-colnames(Q)<-letters[1:2]
x<-as.factor(sim.history(tree,Q)$states)
#Set colors and plot tip names
cols<-setNames(colorRampPalette(c("blue","red"))(2),
c("a","b"))
dotTree(tree,x,fsize=0.7,ftype="i",colors=cols)
#Fit an ARD model
fit<-fitMk(tree,x,model="ARD")
fit
fit$states
x
fitER(tree,x)
library(ape)
fitER(tree,x)
ace(tree,x,"discrete","ER")
tree
ace(x,tree,"discrete","ER")
ace(x,tree,model="ER", type="discrete")
ace(x,tree,model="ER", type="discrete")$lik.anc
library(ape)
tr = read.tree(text="(Streblus_glaber_EG78:0.091736,(Artocarpus_limpato_NZ609:0.039767,((((Artocarpus_primackiana_NZ687:0.011692,Artocarpus_thailandicus_NZ402:0.009841)100:0.003411,(Artocarpus_fretessii_NZ929:0.012438,((Artocarpus_peltatus_NZ694:0.007088,Artocarpus_lacucha_NZ420:0.012011)100:0.002865,'Artocarpus_nitidus_ssp._lingnanensis_NZ911':0.009339)100:0.003499)100:0.001987)100:0.019118,Artocarpus_sepicanus_GW1701:0.029896)77:0.001546,((Artocarpus_integer_NZ918:0.007926,Artocarpus_heterophyllus_EG98:0.008525)100:0.019529,((((Artocarpus_lowii_MWL2:0.010368,((Artocarpus_tamaran_EG92:0.009279,(Artocarpus_sericicarpus_NZ771:0.004385,Artocarpus_elasticus_EG87:0.005918)50:3.86E-4)56:9.44E-4,Artocarpus_teysmannii_NZ946:0.015267)48:0.001141)35:1.0E-6,(Artocarpus_excelsus_NZ780:0.004317,(Artocarpus_kemando_NZ612:0.005635,Artocarpus_camansi_McBryde:0.014988)95:0.003097)65:0.001299)100:0.007514,(Artocarpus_brevipedunculatus_NZ814:0.003942,(Artocarpus_lanceifolius_NZ739:0.017758,Artocarpus_anisophyllus_NZ606:0.003163)100:0.002488)100:0.011573)100:0.003866,(Artocarpus_odoratissimus_NZ866:0.007279,Artocarpus_rigidus_NZ728:0.006164)100:0.017585)100:0.003259)100:0.006726)63:0.0029)1:0.091736);")
unrooted_tr = unroot(tr)
write.tree(unrooted_tr)
ctv::install.views("Phylogenetics", coreOnly = TRUE)
install.packages("ctv")
ctv::install.views("Phylogenetics", coreOnly = TRUE)
library(ape)
primates.tree = "read.phylo(Lemur_catta,((((((Homo_sapiens,Pan),Gorilla),Pongo),Hylobates),(((Macaca_fuscata,M_mulatta),M_fascicularis),M_sylvanus)),Saimiri_sciureus),Tarsius_syrichta);"
primates.tree
primates.tree = read.tree("Lemur_catta,((((((Homo_sapiens,Pan),Gorilla),Pongo),Hylobates),(((Macaca_fuscata,M_mulatta),M_fascicularis),M_sylvanus)),Saimiri_sciureus),Tarsius_syrichta);")
primates.tree = read.tree(text="Lemur_catta,((((((Homo_sapiens,Pan),Gorilla),Pongo),Hylobates),(((Macaca_fuscata,M_mulatta),M_fascicularis),M_sylvanus)),Saimiri_sciureus),Tarsius_syrichta);")
read.tree(text="Lemur_catta,((((((Homo_sapiens,Pan),Gorilla),Pongo),Hylobates),(((Macaca_fuscata,M_mulatta),M_fascicularis),M_sylvanus)),Saimiri_sciureus),Tarsius_syrichta));")
primates.tree = read.tree(text="(Lemur_catta,((((((Homo_sapiens,Pan),Gorilla),Pongo),Hylobates),(((Macaca_fuscata,M_mulatta),M_fascicularis),M_sylvanus)),Saimiri_sciureus),Tarsius_syrichta);")
primates.tree
plot(primates.tree)
drop.tip(primates.tree,"Pongo")
drop.tip(primates.tree,"Homo_sapiens")
library(phytools)
data(anoletree)
x = getStates(anoletree,"tips")
tree = anoletree
rm(anoletree)
tree
x
plot(tree)
data(anoletree)
anoletree
anoletree$mapped.edge = ''
tree = anoletree
plot(tree)
data(anoletree)
anoletree$maps = ''
tree = anoletree
plot(tree)
data(anoletree)
data("anoletree")
write.tree(anoletree,file="~/BIOL6304/Week11_TreesinR/anole.tre")
tree=read.tree("~/BIOL6304/Week11_TreesinR/anole.tre")
tree=read.tree("~/BIOL6304/Week11_TreesinR/data/anole.tre")
plot(tree)
x
cols<-setNames(palette()[1:length(unique(x))],sort(unique(x)))
tiplabels(pie=to.matrix(x,sort(unique(x))),piecol=cols,cex=0.3)
add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
y=-max(nodeHeights(tree)),fsize=0.8)
add.simmap.legend(colors=cols)
library(phytools)
data("anoletree")
tree=read.tree("data/anole.tre")
setwd("~/BIOL6304/Week11_TreesinR")
tree=read.tree("data/anole.tre")
plot(tree)
x = getStates(anoletree,"tips")
rm(anoletree)
x
tiplabels(pie=to.matrix(x,sort(unique(x))),piecol=cols,cex=0.3)
tiplabels(pie=to.matrix(x,sort(unique(x))),cex=0.3)
add.simmap.legend()
cols = setNames(palette()[1:length(unique(x))],sort(unique(x)))
tiplabels(pie=to.matrix(x,sort(unique(x))),cex=0.3)
add.simmap.legend()
add.simmap.legend(colors=cols)
fitER<-ace(x,tree,model="ER",type="discrete")
fitER
fitER$lik.anc
round(fitER$lik.anc,3)
nodelabels(node=1:tree$Nnode+Ntip(tree),
pie=fitER$lik.anc,piecol=cols,cex=0.5)
